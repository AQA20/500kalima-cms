name: CI/CD Pipeline

on:
  push:
    branches: [main, test]

jobs:
  install_dependencies:
    runs-on: self-hosted
    outputs:
      node_modules: ${{ steps.cache_node_modules.outputs.cache-hit }}
    steps:
      - name: Set Environment Variables
        id: set-env
        run: |
          if [ "${{ github.ref_name  }}" == "test" ]; then
            echo "CACHE_KEY=testing" >> $GITHUB_ENV
          else
            echo "CACHE_KEY=production" >> $GITHUB_ENV
          fi

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: ${{ github.ref_name }}
          fetch-depth: 1 # Shallow clone for better performance

      - name: Cache npm dependencies
        id: cache_node_modules
        uses: actions/cache@v4
        with:
          run: cd ${{ github.ref_name }}
          path: |
            node_modules
          key: ${{ runner.os }}-admin-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-admin-${{ env.CACHE_KEY }}

      - name: Install npm dependencies
        run: |
          npm ci --legacy-peer-deps
        if: steps.cache_node_modules.outputs.cache-hit != 'true'
        

  tests:
    runs-on: self-hosted
    needs: install_dependencies
    steps:
      - name: Run Linting
        run: |
          npm run lint
        working-directory: ${{ github.ref_name }}
        

      - name: Run Tests on Production
        if: ${{ github.ref_name  == 'main' }}
        run: |
          npm run test
        env:
          NEXT_PUBLIC_NEXT_ENV: 'production'
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WEB_URL: ${{ secrets.NEXT_PUBLIC_WEB_URL }}
          PORT: ${{ secrets.PORT }}
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          PM2_NAME: ${{ secrets.PM2_NAME }}
        working-directory: ${{ github.ref_name }}

      - name: Run Tests on Test Environment
        if: ${{ github.ref_name == 'test' }}
        run: |
          npm run test
        env:
          NEXT_PUBLIC_NEXT_ENV: 'testing'
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_TEST }}
          NEXT_PUBLIC_WEB_URL: ${{ secrets.NEXT_PUBLIC_WEB_URL_TEST }}
          PORT: ${{ secrets.PORT_TEST }}
          EMAIL: ${{ secrets.EMAIL_TEST }}
          PASSWORD: ${{ secrets.PASSWORD_TEST }}
          PM2_NAME: ${{ secrets.PM2_NAME_TEST }}
        working-directory: ${{ github.ref_name }}

  build:
    runs-on: self-hosted
    needs: tests # Ensure tests pass before building
    steps:
      - name: Build Admin Application to Production
        if: ${{ github.ref_name == 'main' }}
        run: |
          rm -rf .next  # Clean up previous build artifacts
          npm run build  # Build the admin application
          pm2 restart "${{ secrets.PM2_NAME }}" || pm2 start pm2.config.cjs
          pm2 save
        env:
          NEXT_PUBLIC_NODE_ENV: 'production'
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WEB_URL: ${{ secrets.NEXT_PUBLIC_WEB_URL }}
          PORT: ${{ secrets.PORT }}
          PM2_NAME: ${{ secrets.PM2_NAME }}
        working-directory: ${{ github.ref_name }}

      - name: Build Admin Application to Test Environment
        if: ${{ github.ref_name == 'test' }}
        run: |
          rm -rf .next  # Clean up previous build artifacts
          npm run build  # Build the admin application
          pm2 restart "${{ secrets.PM2_NAME_TEST }}" || pm2 start pm2.config.cjs
          pm2 save
        env:
          NEXT_PUBLIC_NODE_ENV: 'testing'
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_TEST }}
          NEXT_PUBLIC_WEB_URL: ${{ secrets.NEXT_PUBLIC_WEB_URL_TEST }}
          PORT: ${{ secrets.PORT_TEST }}
          PM2_NAME: ${{ secrets.PM2_NAME_TEST }}
        working-directory: ${{ github.ref_name }}

  deploy:
    runs-on: self-hosted
    needs: build # Ensure the app is built before deploying
    steps:
      - name: Deploy Admin Build to Production
        if: ${{ github.ref_name == 'main' }}
        run: |
          # Build the admin application in a temporary directory to minimize downtime
          sudo mkdir -p /var/www/admin_temp
          sudo cp -r ~/actions-runner-admin/_work/500kalima-cms/500kalima-cms/${{ github.ref_name }}/.next  /var/www/admin_temp/
          sudo rm -rf /var/www/admin/.next
          # Replace the old version with the new version
          sudo mv /var/www/admin_temp/.next /var/www/admin/.next
          # Remove temp directory
          sudo rm -rf /var/www/admin_temp

      - name: Deploy Admin Build to Test Environment
        if: ${{ github.ref_name == 'test' }}
        run: |
          # Build the admin application in a temporary directory to minimize downtime
          sudo mkdir -p /var/www/manage_temp
          sudo cp -r ~/actions-runner-admin/_work/500kalima-cms/500kalima-cms/${{ github.ref_name }}/.next /var/www/manage_temp/
          sudo rm -rf /var/www/manage/.next
          # Replace the old version with the new version
          sudo mv /var/www/manage_temp/.next /var/www/manage/.next
          # Remove temp directory
          sudo rm -rf /var/www/manage_temp
          
      - name: Restart Nginx Service
        run: |
          sudo systemctl reload nginx
          sudo systemctl restart nginx
